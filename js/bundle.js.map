{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA,6DAA6D,gBAAgB;;AAE7E;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;;AAGA;AACA;AACA;AACA,gBAAgB;;AAEhB;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA,iEAAe,IAAI;;;;;;;;;;;;;;;ACjJgC;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;;AAGA;AACA,uBAAuB,UAAU,MAAM,SAAS;AAChD,8CAA8C,WAAW;AACzD,4CAA4C,WAAW;AACvD;AACA;AACA;AACA,sDAAsD,WAAW;AACjE;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAI,+DAAW;AACf;AACA;AACA,uBAAuB,iCAAiC;AACxD;AACA,SAAS;AACT,KAAK;;AAEL;AACA;AACA;AACA,mCAAmC,iCAAiC;AACpE;AACA,gBAAgB;AAChB,YAAY;;AAEZ;;AAEA,iEAAe,KAAK,EAAC;;;;AAIrB;;AAEA;AACA;;AAEA;AACA,0BAA0B,iCAAiC;AAC3D;;AAEA;;AAEA;AACA,kCAAkC,KAAK,MAAM,OAAO;AACpD,yDAAyD,MAAM;AAC/D,uDAAuD,MAAM;AAC7D;AACA;AACA;AACA,iEAAiE,MAAM;AACvE;AACA;AACA;AACA,YAAY;AACZ;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACtIgD;AACA;;AAEhD;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,4BAA4B;AAC5B;AACA;AACA,uBAAuB;AACvB,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E;AAC/E;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,oBAAoB;AACpB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,gBAAgB;AAChB,YAAY,4DAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;;AAEb,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ,iDAAS;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,kDAAU;AACtB,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,iCAAiC,aAAa;AAC9C;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA,iEAAe,KAAK;;;;;;;;;;;;;;;;ACnNpB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,KAAK,EAAC;AACD;;;;;;;;;;;;;;;ACzDpB,iBAAiB,qFAAqF;;AAEtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,oCAAoC,WAAW;AAC/C,QAAQ;AACR;AACA;AACA;;AAEA;AACA,8BAA8B,cAAc;AAC5C,gCAAgC,WAAW;AAC3C,IAAI;AACJ;AACA;AACA;;AAEA;;AAEA;AACA;AACA,iCAAiC,cAAc;AAC/C,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,uCAAuC,WAAW;AAClD,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,MAAM;;;AAGN;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,qBAAqB,mBAAmB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA,mDAAmD,OAAO;;AAE1D;AACA;AACA,QAAQ;AACR;AACA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA,mDAAmD,OAAO;;AAE1D;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uDAAuD,OAAO;;AAE9D;AACA;;AAEA,OAAO;AACP,GAAG;;AAEH;;AAEA,iEAAe,MAAM;;;;;;;;;;;;;;ACrNrB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;;AAEA,iEAAe,IAAI;;;;;;;;;;;;;;ACnDnB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,iEAAe,KAAK;;;;;;;;;;;;;;;ACzEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,IAAI,YAAY,WAAW;AACtE;AACA;AACA;AACA;;AAEkB;;;;;;;UC3BlB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;ACNY;;AAEZ,CAAoC;AACC;AACC;AACA;AACF;AACE;AACE;AACE;;AAE1C;AACA;AACA,0CAA0C,yDAAS;;AAEnD,QAAQ,yDAAI;AACZ,QAAQ,0DAAK;AACb,QAAQ,0DAAK;AACb,QAAQ,0DAAK;AACb,QAAQ,yDAAI;AACZ,QAAQ,0DAAK;AACb,QAAQ,2DAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET,CAAC","sources":["webpack://food/./js/modules/calc.js","webpack://food/./js/modules/cards.js","webpack://food/./js/modules/forms.js","webpack://food/./js/modules/modal.js","webpack://food/./js/modules/slider.js","webpack://food/./js/modules/tabs.js","webpack://food/./js/modules/timer.js","webpack://food/./js/services/services.js","webpack://food/webpack/bootstrap","webpack://food/webpack/runtime/define property getters","webpack://food/webpack/runtime/hasOwnProperty shorthand","webpack://food/webpack/runtime/make namespace object","webpack://food/./js/script.js"],"sourcesContent":["function calc() {\n    // Calc\n\n    // назначаем data атрибуты с коэффициентами активности\n\n    const result = document.querySelector('.calculating__result span');\n\n    let sex, height, weight, age, ratio;\n\n    if (localStorage.getItem('sex')) {\n        sex = localStorage.getItem('sex');\n    } else {\n        sex = 'female';\n        localStorage.setItem('sex', 'female');\n    }\n\n    if (localStorage.getItem('ratio')) {\n        ratio = localStorage.getItem('ratio');\n    } else {\n        ratio = 1.375;\n        localStorage.setItem('ratio', 1.375);\n    }\n\n    function calcTotal() {\n        if (!sex || !height || !weight || !age || !ratio) {\n            result.textContent = \"____\";\n            // досрочно прерываем функцию\n            return;\n        }\n\n        if (sex === 'female') {\n            result.textContent = Math.round((447.6 + (9.2 * weight) + (3.1 * height) - (4.3 * age)) * ratio);\n        } else {\n            result.textContent = Math.round((88.36 + (13.4 * weight) + (4.8 * height) - (5.7 * age)) * ratio);\n        }\n    }\n    calcTotal();\n\n       // сохранение данных из localStorage\n    function initLocalSettings(selector, activeClass) {\n        const elements = document.querySelectorAll(selector);\n\n        elements.forEach(elem => {\n            // убираем все классы активности\n            elem.classList.remove(activeClass);\n            // если в локал сторадж уже записано значение, то этому элементу назначаем класс активности\n            if (elem.getAttribute('id') === localStorage.getItem('sex')) {\n                elem.classList.add(activeClass);\n            }\n            if (elem.getAttribute('data-ratio') === localStorage.getItem('ratio')) {\n                elem.classList.add(activeClass);\n            }\n        });\n    }\n\n    initLocalSettings('#gender div', 'calculating__choose-item_active');\n    initLocalSettings('.calculating__choose_big div', 'calculating__choose-item_active');\n\n    function getStaticInformation (selector, activeClass) {\n        const elements = document.querySelectorAll(selector);\n\n        elements.forEach(elem => {\n            elem.addEventListener('click', (e) => {\n                if (e.target.getAttribute('data-ratio')) {\n                    // если пользователь кликнул на какую-то активность то мы берем значение, которое стоит в дата-атрибуте\n                    ratio = +e.target.getAttribute('data-ratio');\n                    // запоминаем информацию в локал сторадж\n                    localStorage.setItem('ratio', +e.target.getAttribute('data-ratio'));\n                } else {\n                    sex = e.target.getAttribute('id');\n                    localStorage.setItem('sex', e.target.getAttribute('id'));\n                }\n    \n    \n                // убираем все классы активности\n                elements.forEach(elem => {\n                    elem.classList.remove(activeClass);\n                });\n    \n                // добавляем класс активности туда, куда кликнули\n                e.target.classList.add(activeClass);\n                calcTotal();\n            });\n        })\n    }\n    getStaticInformation('#gender div', 'calculating__choose-item_active');\n    getStaticInformation('.calculating__choose_big div', 'calculating__choose-item_active');\n\n        // // делегирование - здесь неприменимо\n        // function getStaticInformation (parentSelector, activeClass) {\n            // const elements = document.querySelectorAll(`${parentSelector} div`);\n\n        // document.querySelector(parentSelector).addEventListener('click', (e) => {\n        //     if (e.target.getAttribute('data-ratio')) {\n        //         // если пользователь кликнул на какую-то активность то мы берем значение, которое стоит в дата-атрибуте\n        //         ratio = +e.target.getAttribute('data-ratio');\n        //     } else {\n        //         sex = e.target.getAttribute('id');\n        //     }\n\n\n        //     // убираем все классы активности\n        //     elements.forEach(elem => {\n        //         elem.classList.remove(activeClass);\n        //     });\n\n        //     // добавляем класс активности туда, куда кликнули\n        //     e.target.classList.add(activeClass);\n        //     calcTotal();\n        // });\n    // }\n    // getStaticInformation('#gender', 'calculating__choose-item_active');\n    // getStaticInformation('.calculating__choose_big', 'calculating__choose-item_active');\n\n    function getDynamicInformation(selector) {\n        const input = document.querySelector(selector);\n\n        input.addEventListener('input', () => {\n            // проверяем на не числа\n            if (input.value.match(/\\D/g)){\n                input.style.border = '1px solid red';\n            } else {\n                input.style.border = 'none';\n            }\n\n            // проверяем id\n            switch(input.getAttribute('id')){\n                case 'height':\n                    height = +input.value;\n                    break;\n                case 'weight': \n                    weight = +input.value;\n                    break;\n                case 'age': \n                    age = +input.value;\n                    break;\n            }\n            calcTotal();\n        });\n    }\n    getDynamicInformation('#height');\n    getDynamicInformation('#weight');\n    getDynamicInformation('#age');\n}\n\nexport default calc;","import { getResource } from \"../services/services\";\n\nfunction cards() {\n    // // используем классы для карточек\n    class MenuCard {\n    // передаем аргументы, которые будут меняться\n    // остальные параметры передаем в rest - он будет массивом\n    constructor(src, alt, title, descr, price, parentSelector, ...classes) {\n        this.src = src;\n        this.alt = alt;\n        this.title = title;\n        this.descr = descr;\n        this.price = price;\n        this.classes = classes;\n        // задаем родительский элемент\n        this.parent = document.querySelector(parentSelector);\n        // курс валют\n        this.transfer = 27;\n        // вызываем метод конвертации\n        this.changeToUAH();\n    }\n    // метод первода из долларов в гривны\n    changeToUAH() {\n        this.price = this.price * this.transfer;\n    }\n    // помещаем на страницу\n    render() {\n        const element = document.createElement('div');\n        // делаем проверку, если в массив не пришло значение, то по дефолту выставляем ему класс\n        if (this.classes.length === 0) {\n            this.element = 'menu__item';\n            element.classList.add(this.element);\n        } else {\n            // перебираем массив, который приходит из classes и добавляем элементу класс\n            this.classes.forEach(className => element.classList.add(className));\n        }\n\n\n    element.innerHTML = `\n            <img src=${this.src} alt=${this.alt}>\n            <h3 class=\"menu__item-subtitle\">${this.title}</h3>\n            <div class=\"menu__item-descr\">${this.descr}</div>\n            <div class=\"menu__item-divider\"></div>\n            <div class=\"menu__item-price\">\n                <div class=\"menu__item-cost\">Цена:</div>\n                <div class=\"menu__item-total\"><span>${this.price}</span> грн/день</div>\n            </div>\n    `;\n    // помещаем элемент в блок\n        this.parent.append(element);\n        }\n    }\n\n    getResource('http://localhost:3000/menu')\n    .then(data => {\n        // берем свойства обьекта с базы данных\n        data.forEach(({img, altimg, title, descr, price}) => {\n            new MenuCard(img, altimg, title, descr, price, '.menu .container').render();\n        });\n    });\n\n    // // тоже самое через библиотеку axios\n    // axios.get('http://localhost:3000/menu')\n    //     .then(data => {\n    //         data.data.forEach(({img, altimg, title, descr, price}) => {\n    //             new MenuCard(img, altimg, title, descr, price, '.menu .container').render();\n    //         });\n    //     });\n\n}\n\nexport default cards;\n\n\n\n    // второй способ - без использования шаблона класса\n\n    // getResource('http://localhost:3000/menu')\n    //     .then(data => createCard(data));\n\n    // function createCard(data) {\n    //     data.forEach(({img, altimg, title, descr, price}) => {\n    //         const element = document.createElement('div');\n\n    //         element.classList.add('menu__item');\n\n    //         element.innerHTML = `\n    //                 <img src=${img} alt=${altimg}>\n    //                 <h3 class=\"menu__item-subtitle\">${title}</h3>\n    //                 <div class=\"menu__item-descr\">${descr}</div>\n    //                 <div class=\"menu__item-divider\"></div>\n    //                 <div class=\"menu__item-price\">\n    //                     <div class=\"menu__item-cost\">Цена:</div>\n    //                     <div class=\"menu__item-total\"><span>${price}</span> грн/день</div>\n    //                 </div>\n    //         `;\n    //         document.querySelector('.menu .container').append(element);\n    //     });\n    // }\n\n\n    // const div = new MenuCard();\n    // div.render();\n\n    // если нужно использовать 1 раз\n    // new MenuCard(\n    //     \"img/tabs/vegy.jpg\",\n    //     \"vegy\",\n    //     'Меню \"Фитнес\"',\n    //     'Меню \"Фитнес\" - это новый подход к приготовлению блюд: больше свежих овощей и фруктов. Продукт активных и здоровых людей. Это абсолютно новый продукт с оптимальной ценой и высоким качеством!',\n    //     9,\n    //     '.menu .container',\n    //     // передаем последним аргументом класс, куда нужно будет вставить содержимое\n    //     'menu__item'\n    // ).render();\n\n    // new MenuCard(\n    //     \"img/tabs/elite.jpg\",\n    //     \"elite\",\n    //     'Меню “Премиум”',\n    //     'В меню “Премиум” мы используем не только красивый дизайн упаковки, но и качественное исполнение блюд. Красная рыба, морепродукты, фрукты - ресторанное меню без похода в ресторан!',\n    //     14,\n    //     '.menu .container',\n    //     'menu__item'\n    // ).render();\n\n    // new MenuCard(\n    //     \"img/tabs/post.jpg\",\n    //     \"post\",\n    //     'Меню \"Постное\"',\n    //     'Меню “Постное” - это тщательный подбор ингредиентов: полное отсутствие продуктов животного происхождения, молоко из миндаля, овса, кокоса или гречки, правильное количество белков за счет тофу и импортных вегетарианских стейков.',\n    //     12,\n    //     '.menu .container',\n    //     'menu__item'\n    // ).render();\n\n","import { closeModal, openModal } from \"./modal\";\nimport { postData } from \"../services/services\";\n\nfunction forms(formSelector, modalTimerId) {\n\n    const forms = document.querySelectorAll(formSelector);\n    const message = {\n        loading: 'img/form/spinner.svg',\n        success: 'Спасибо! Скоро мы с вами свяжемся',\n        failure: 'Что-то пошло не так...'\n    };\n\n        // подвязываем все формы под этот запрос перебором\n    forms.forEach(item => {\n        bindPostData(item);\n    });\n\n    \n    //     // формат XMLHTTpRequest\n    \n    //     // function postData(form) {\n    //     //     // событие submit срабатывает каждый раз, когда мы пытаемся отправить какую-то форму\n    //     //     form.addEventListener('submit', (e) => {\n    //     //         e.preventDefault();\n    \n    //     //         const statusMessage = document.createElement('div');\n    //     //         statusMessage.classList.add('status');\n    //     //         statusMessage.textContent = message.loading;\n    //     //         form.append(statusMessage);\n    \n    //     //         const request = new XMLHttpRequest();\n    //     //         request.open('POST', 'server.php');\n    \n    //     //         // настраиваем заголовки\n    //     //         // в случае с XMLHttpRequest() подставляется автоматически\n    //     //         // самое главное чтобы у всех инпутов, которые отправляются на сервер стоял атрибут name\n    //     //         request.send(formData);\n    //     //         // отслеживаем конечную загрузку запроса\n    //     //         request.addEventListener('load', () => {\n    //     //             if (request.status === 200) {\n    //     //                 console.log(request.response);\n    //     //                 statusMessage.textContent = message.success;\n    //     //                 // очистка формы\n    //     //                 form.reset();\n    //     //                 // удаляем блок message\n    //     //                 setTimeout(() => {\n    //     //                     statusMessage.remove();\n    //     //                 }, 2000);\n    //     //             } else {\n    //     //                 statusMessage.textContent = message.failure;\n    //     //             }\n    //     //         });\n    //     //     });\n    //     // };\n    \n        // XMLHttpRequest()\n    \n        // function postData(form) {\n        //     form.addEventListener('submit', (e) => {\n        //         e.preventDefault();\n    \n        //         let statusMessage = document.createElement('img');\n        //         statusMessage.src = message.loading;\n        //         statusMessage.style.cssText = `\n        //             display: block;\n        //             margin: 0 auto;\n        //         `;\n        //         // вместо аппенда\n        //         form.insertAdjacentElement('afterend', statusMessage);\n            \n        //         const request = new XMLHttpRequest();\n        //         request.open('POST', 'server.php');\n        //         request.setRequestHeader('Content-type', 'application/json; charset=utf-8');\n        //         const formData = new FormData(form);\n    \n        //         const object = {};\n        //         formData.forEach(function(value, key){\n        //             object[key] = value;\n        //         });\n        //         const json = JSON.stringify(object);\n    \n        //         request.send(json);\n    \n        //         request.addEventListener('load', () => {\n        //             if (request.status === 200) {\n        //                 console.log(request.response);\n        //                 showThanksModal(message.success);\n        //                 statusMessage.remove();\n        //                 form.reset();\n        //             } else {\n        //                 showThanksModal(message.failure);\n        //             }\n        //         });\n        //     });\n        // }\n    \n        // fetch\n        // функция которая отвечает за отправку данных на сервер\n        // data - данные, которые будут поститься в этой функции\n        // все операции выполняются асинхронно, поэтому нужно поставить async - чтобы они дожидались друг друга\n\n    // функция, которая отвечает за привязку постинга\n    function bindPostData(form) {\n        form.addEventListener('submit', (e) => {\n            e.preventDefault();\n\n            let statusMessage = document.createElement('img');\n            statusMessage.src = message.loading;\n            statusMessage.style.cssText = `\n                display: block;\n                margin: 0 auto;\n            `;\n            // вместо аппенда\n            form.insertAdjacentElement('afterend', statusMessage);\n\n            // собираем данные\n            const formData = new FormData(form);\n\n        // если нужно отправить в формате json \n            // const object = {};\n            // formData.forEach(function(value, key){\n            //     object[key] = value;\n            // });\n            // превращаем обьект в массив массивов, а затем превращаем массив в обьект, после этого превращаем в json\n            const json = JSON.stringify(Object.fromEntries(formData.entries()));\n\n\n            // отправляем данные\n\n            // переделали в функцию\n\n            // fetch('server.php', {\n            //     method: \"POST\",\n            //     headers: {\n            //         'Content-type': 'application/json'\n            //     },\n            //     //  формат JSON\n            //     body: JSON.stringify(object)\n            //     // body: formData\n            //     // data - это те данные, которые нам возвращаются с сервера и при помощи метода then мы их обрабатываем\n            // })\n            postData('http://localhost:3000/requests', json)\n            // данная строка больше не нужна\n            // .then(data => data.text())\n            .then(data => {\n                    console.log(data);\n                    showThanksModal(message.success);\n                    statusMessage.remove();\n                    // что-то пошло не так\n            }).catch(() => {\n                showThanksModal(message.failure);\n            }).finally(() => {\n                form.reset();\n            })\n\n        });\n    }\n\n        // реализация благодарственного окна\n    function showThanksModal(message) {\n        const prevModalDialog = document.querySelector('.modal__dialog');\n\n        // скрываем наше модальное окно\n        prevModalDialog.classList.add('hide');\n        // открываем модальное окно\n        openModal('.modal');\n\n            // создаем новый элемент внутри старого модального окна\n        const thanksModal = document.createElement('div');\n        thanksModal.classList.add('modal__dialog');\n        // создаем верстку\n        thanksModal.innerHTML = `\n            <div class=\"modal__content\">\n                <div class=\"modal__close\" data-close>×</div>\n                <div class=\"modal__title\">${message}</div>\n            </div>\n        `;\n        // помещаем элемент в модальное окно\n        document.querySelector('.modal').append(thanksModal);\n        // удаляем модальное окно с сообщением\n        setTimeout(() => {\n            thanksModal.remove();\n            prevModalDialog.classList.add('show');\n            prevModalDialog.classList.remove('hide');\n            closeModal('.modal');\n        }, 4000);\n    }\n\n    // fetch\n    // https://jsonplaceholder.typicode.com\n    // url на который мы будем посылать запрос\n    // fetch('https://jsonplaceholder.typicode.com/posts', {\n    //     method: \"POST\",\n    //     body: JSON.stringify({name: 'Alex'}),\n    //     headers: {\n    //         'Content-type': 'application/json'\n    //     }\n    // })\n    // // метод fetch использует промиссы, который затем обрабатываются при помощи then\n    // .then(response => response.json())\n    // .then(json => console.log(json));\n\n    // получаем данные с базы данных\n    // запускаем команду json-server db.json и меняем название нашей бд на тот который приходит\n    fetch('http://localhost:3000/menu')\n    .then(data => data.json())\n    .then(res => console.log(res));\n\n\n}\n\nexport default forms;","function closeModal(modalSelector) {\n    const modal = document.querySelector(modalSelector);\n\n    modal.classList.add('hide');\n    modal.classList.remove('show');\n    // чтобы страница не прокручивалась, когда открыто модальное окно\n    document.body.style.overflow = '';\n}\n\nfunction openModal(modalSelector, modalTimerId) {\n    const modal = document.querySelector(modalSelector);\n\n    modal.classList.add('show');\n    modal.classList.remove('hide');\n    document.body.style.overflow = 'hidden';\n    // если пользователь сам открыл модальное окно, то автоматически оно открываться не будет\n    if (modalTimerId) {\n        clearInterval(modalTimerId);\n    }\n}\n\nfunction modal(triggerSelector, modalSelector, modalTimerId) {\n\n     // навешиваем на нужные кнопки дата-атрибуты data-modal data-close\n        const modalTrigger = document.querySelectorAll(triggerSelector),\n              modal = document.querySelector(modalSelector);\n\n    modalTrigger.forEach(btn => {\n        btn.addEventListener('click', () => openModal(modalSelector, modalTimerId));\n    });\n\n    modal.addEventListener('click', (e) => {\n        if (e.target === modal || e.target.getAttribute('data-close') == \"\") {\n            closeModal(modalSelector);\n        }\n    });\n\n    // чтобы можно было нажать на эскейп на клавиатуре и окно закрылось\n    document.addEventListener('keydown', (e) => {\n        // проверка нужна для того, чтобы модальное окно не появлялось каждый раз, когда нажимаем клавишу escape\n        if (e.code === \"Escape\" && modal.classList.contains('show')) { \n            closeModal(modalSelector);\n        }\n    });\n\n    function showModalByScroll() {\n        // свойство которое отвечает за прокурутку сверху + высота клиента(видимая часть) >= полная прокрутка -1 px \n        if (window.pageYOffset + document.documentElement.clientHeight >= document.documentElement.scrollHeight -1) {\n            openModal(modalSelector, modalTimerId);\n            // удаляем обработчик события, чтобы он сработал только 1 раз\n            window.removeEventListener('scroll', showModalByScroll);\n        }\n    }\n    window.addEventListener('scroll', showModalByScroll);\n}\n\nexport default modal;\nexport {closeModal};\nexport {openModal};","function slider({container, slide, nextArrow, prevArrow, totalCounter, currentCounter, wrapper, field}) {\n\n        const slides = document.querySelectorAll(slide),\n              slider = document.querySelector(container),\n              prev = document.querySelector(prevArrow),\n              next = document.querySelector(nextArrow),\n              total = document.querySelector(totalCounter),\n              current = document.querySelector(currentCounter),\n      //   только для второго варианта\n              slidesWrapper = document.querySelector(wrapper),\n              slidesField = document.querySelector(field),\n      //   получаем ширину окна, через которое будем смотреть на слайды\n              width = window.getComputedStyle(slidesWrapper).width;\n  // создаем индекса, который будет определять положение слайдера\n  let slideIndex = 1;\n  // во втором случае нам понадобится переменная, которая будет показывать сколько мы уже отступили вправо или влево\n  let offset = 0;\n\n  function dotsOpacity() {\n      dots.forEach(dot => dot.style.opacity = '.5');\n      dots[slideIndex - 1].style.opacity = 1;\n  }\n\n  function addZero() {\n      if (slides.length < 10) {\n          current.textContent = `0${slideIndex}`;\n      } else {\n          current.textContent = slideIndex;\n      }\n  }\n\n  if (slides.length < 10) {\n      total.textContent = `0${slides.length}`;\n      current.textContent = `0${slideIndex}`;\n  } else {\n      total.textContent = slides.length;\n      current.textContent = slideIndex;\n  }\n\n  // showSlides(slideIndex);\n\n  // // чтобы подставлялся 0 в начале, эту проверку лучше вынести за пределы функции чтобы слайдер не моргал, тк вызывается функция\n  // if (slides.length < 10) {\n  //     total.textContent = `0${slides.length}`;\n  // } else {\n  //     total.textContent = slides.length;\n  // }\n\n  // function showSlides(n) {\n  //     // чтобы с последнего слайда переключался на 1 слайд\n  //     if (n > slides.length) {\n  //         slideIndex = 1;\n  //     }\n  //     // обратная операция, если меньше 1 перемещаемся на последний слайд\n  //     if (n < 1) {\n  //         slideIndex = slides.length;\n  //     }\n\n  //     slides.forEach(item => item.style.display = 'none');\n\n  //     slides[slideIndex - 1].style.display = 'block';\n\n  //     if (slides.length < 10) {\n  //         current.textContent = `0${slideIndex}`;\n  //     } else {\n  //         current.textContent = slideIndex;\n  //     }\n  // }\n\n  // function plusSlides(n) {\n  //     // вызывает функцию и увеличивает индекс на значение n\n  //     showSlides(slideIndex += n);\n  // }\n  \n  // prev.addEventListener('click', () => {\n  //     plusSlides(-1);\n  // });\n      \n  // next.addEventListener('click', () => {\n  //     plusSlides(1);\n  // });\n\n\n  // slider-carousel\n\n  // создаем карусель со всеми слайдами\n  slidesField.style.width = 100 * slides.length + '%';\n  slidesField.style.display = 'flex';\n  slidesField.style.transition = '0.5s all';\n\n  slidesWrapper.style.overflow = 'hidden';\n\n  // устанавливаем ширину для каждого отдельного слайда\n  slides.forEach(slide => {\n      slide.style.width = width;\n  });\n\n  // чтобы спозиционировать дотсы\n  slider.style.position = 'relative';\n\n  const indicators = document.createElement('ol'),\n  // создаем переменную массив, чтобы переключались дотсы\n        dots = [];\n\n  indicators.classList.add('carousel-indicators');\n  indicators.style.cssText = `\n      position: absolute;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      z-index: 15;\n      display: flex;\n      justify-content: center;\n      margin-right: 15%;\n      margin-left: 15%;\n      list-style: none;\n      `;\n\n      slider.append(indicators);\n\n      // запускаем цикл, чтобы каждый дотс относился к определенной картинке\n      for(let i = 0; i < slides.length; i++) {\n          // создаем переменную ли\n          const dot = document.createElement('li');\n          dot.setAttribute('data-slide-to', i + 1);\n          dot.style.cssText = `\n              box-sizing: content-box;\n              flex: 0 1 auto;\n              width: 30px;\n              height: 6px;\n              margin-right: 3px;\n              margin-left: 3px;\n              cursor: pointer;\n              background-color: #fff;\n              background-clip: padding-box;\n              border-top: 10px solid transparent;\n              border-bottom: 10px solid transparent;\n              opacity: .5;\n              transition: opacity .6s ease;\n          `;\n          if (i == 0) {\n              dot.style.opacity = 1;\n          }\n          indicators.append(dot);\n          // помещаем дот в массив\n          dots.push(dot);\n      }\n  \n  function deleteNotDigits(str) {\n      return +str.replace(/\\D/g, '');\n  }\n\n  next.addEventListener('click', () => {\n      // от ширины например 500px нужно отрезать 2 последних символа и превратить в числовой формат\n      // наш отступ равен ширине одного слайда умноженное на количество слайдов минус 1 - в таком случае мы дошли до конца и возвращаемся к первому слайду\n      // буквы px просто заменятся на ничего, те удалятся\n      if (offset == deleteNotDigits(width) * (slides.length - 1)) {\n          offset = 0;\n      } else {\n          // добавить смещение\n          offset += deleteNotDigits(width);\n      }\n\n      slidesField.style.transform = `translateX(-${offset}px)`;\n\n      if (slideIndex == slides.length) {\n          slideIndex = 1;\n      } else {\n          slideIndex++;\n      }\n\n      addZero();\n\n      dotsOpacity();\n  });\n\n  prev.addEventListener('click', () => {\n      if (offset == 0) {\n          offset = deleteNotDigits(width) * (slides.length - 1);\n      } else {\n          offset -= deleteNotDigits(width);\n      }\n\n      slidesField.style.transform = `translateX(-${offset}px)`;\n\n      if (slideIndex == 1) {\n          slideIndex = slides.length;\n      } else {\n          slideIndex--;\n      }\n\n      addZero();\n      dotsOpacity();\n  });\n\n  // чтобы оживить точки при нажатии\n  dots.forEach(dot => {\n      dot.addEventListener('click', (e) => {\n          const slideTo = e.target.getAttribute('data-slide-to');\n\n          slideIndex = slideTo;\n          offset = deleteNotDigits(width) * (slideTo - 1);\n          // устанавливаем смещение слайдера\n          slidesField.style.transform = `translateX(-${offset}px)`;\n\n          addZero();\n          dotsOpacity();\n\n      });\n  });\n\n}\n\nexport default slider;","function tabs(tabsSelector, tabsContentSelector, tabsParentSelector, activeClass) {\n\n\tlet tabs = document.querySelectorAll(tabsSelector),\n        tabsContent = document.querySelectorAll(tabsContentSelector),\n        tabsParent = document.querySelector(tabsParentSelector);\n\n    function hideTabContent() {\n    \n    tabsContent.forEach(item => {\n         // скрываем весь контент, который сейчас есть на сайте\n        item.classList.add('hide');\n        item.classList.remove('show', 'fade');\n    });\n\n    tabs.forEach(item => {\n         // удаляем класс активности, точку не ставим тк работаем с классами\n        item.classList.remove(activeClass);\n    });\n    }\n// тк это первый слайд передаем 0\n    function showTabContent(i = 0) {\n     // номер таба будем передавать как аргумент\n        tabsContent[i].classList.add('show', 'fade');\n        tabsContent[i].classList.remove('hide');\n        tabs[i].classList.add(activeClass);\n    }\n\n    hideTabContent();\n    showTabContent();\n\n    tabsParent.addEventListener('click', function(event) {\n        // если часто нужно будет использовать event.target - создаем переменную\n        const target = event.target;\n        // удаляем точку у строки(класс tabheader__item)\n        if(target && target.classList.contains(tabsSelector.slice(1))) {\n            // запускае перебор всех табов, если его номер это тот номер на который кликнул пользователь, тогда показываем его на странице\n            // дальше передаем колбэк функцию\n            // второй элемент всегда отвечает за номер по порядку.\n            // первый это каждый таб\n            tabs.forEach((item, i) => {\n            // если элемент совпадает с табом, тогда будем вызывать эти 2 функции\n                if (target == item) {\n                    hideTabContent();\n    // i это номер того элемента, который в этом условии совпал\n                    showTabContent(i);\n                }\n            });\n        }\n    });\n}\n\nexport default tabs;","function timer(id, deadline) {\n\n    // функция, которая определяет разницу между дедлайном и текущей датой\n    function getTimeRemaining(endtime) {\n        let days, hours, minutes, seconds;\n// кол-во миллисекунд, которое будет в нашем конечном времени минуc текущая дата\n// Метод Date.parse() разбирает строковое представление даты и возвращает количество миллисекунд, прошедших с 1 января 1970 года 00:00:00 по UTC.\n        const t = Date.parse(endtime) - Date.parse(new Date());\n            if (t <= 0) {\n            days = 0;\n            hours = 0;\n            minutes = 0;\n            seconds =  0;\n        } else {\n            // находим сколько дней будет в этом колличестве миллисекунд Math.floor округляет до целого\n        // общее число t делим на (1000 миллисекунд умножаем на 60 = 1 минута, затем умножаем 60 минут и умножаем на 24 часа)\n            days = Math.floor( (t/(1000*60*60*24)) ),\n            seconds = Math.floor( (t/1000) % 60 ),\n            minutes = Math.floor( (t/1000/60) % 60 ),\n            hours = Math.floor( (t/(1000*60*60) % 24) );\n        }\n        return {\n            'total': t,\n            'days': days,\n            'hours': hours,\n            'minutes': minutes,\n            'seconds': seconds\n        };\n    }\n\n    // если число однозначное, то подставляем 0 перед числом (меньше, чем 10)\n    function getZero(num){\n        if (num >= 0 && num < 10) { \n            return '0' + num;\n        } else {\n            return num;\n        }\n    }\n\n    // функцияя, которая устанавливает таймер на страницу\n    function setClock(selector, endtime) {\n\n        const timer = document.querySelector(selector),\n            days = timer.querySelector(\"#days\"),\n            hours = timer.querySelector('#hours'),\n            minutes = timer.querySelector('#minutes'),\n            seconds = timer.querySelector('#seconds'),\n                //   функция будет запускаться каждую секунду\n            timeInterval = setInterval(updateClock, 1000);\n\n        // чтобы верстка не моргала нужно вызвать эту функцию\n        updateClock();\n\n        // функция, которая обновляет таймер каждую секунду\n        function updateClock() {\n                // используем функцию, которую создали до этого, которая возвращает обьект\n            const t = getTimeRemaining(endtime);\n\n            days.innerHTML = getZero(t.days);\n            hours.innerHTML = getZero(t.hours);\n            minutes.innerHTML = getZero(t.minutes);\n            seconds.innerHTML = getZero(t.seconds);\n\n            // функцию нужно будет остановить по истечении времени\n            if (t.total <= 0) {\n                clearInterval(timeInterval);\n            }\n        }\n    }\n\n    setClock(id, deadline);\n}\n\nexport default timer;","const postData = async (url, data) => {\n    // во внутрь помещаем промисс, который возвращается от фетча\n    // ставим await чтобы код дожидался ответа\n    const res = await fetch(url, {\n        method: \"POST\",\n        headers: {\n            'Content-type': 'application/json'\n        },\n        body: data\n    });\n    // промисс возвращаем в формате json\n    return await res.json();\n};\n\nconst getResource = async (url) => {\n    // во внутрь помещаем промисс, который возвращается от фетча\n    // ставим await чтобы код дожидался ответа\n    const res = await fetch(url);\n    // обработка ошибок, тк метод fetch выводит ошибку только в случае отсутствия интернета\n    if (!res.ok) {\n        // выкидываем новую ошибку\n        throw new Error(`Could not fetch ${url}, status: ${res.status}`);\n    }\n    // промисс возвращаем в формате json\n    return await res.json();\n};\n\nexport {postData};\nexport {getResource};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","'use strict'\n\nimport  tabs  from './modules/tabs';\nimport  modal from './modules/modal';\nimport  timer  from './modules/timer';\nimport  cards  from './modules/cards';\nimport  calc  from './modules/calc';\nimport  forms  from './modules/forms';\nimport  slider  from './modules/slider';\nimport {openModal} from './modules/modal';\n\nwindow.addEventListener('DOMContentLoaded', function() {\n        // открытие модального окна после того, как юзер пролистал какую-то часть сайта\n    const modalTimerId = setTimeout(() => openModal('.modal', modalTimerId), 300000);\n\n        tabs('.tabheader__item', '.tabcontent', '.tabheader__items', 'tabheader__item_active');\n        modal('[data-modal]', '.modal', modalTimerId);\n        timer('.timer', '2023-11-21');\n        cards();\n        calc();\n        forms('form', modalTimerId);\n        slider({\n            container: '.offer__slider',\n            slide: '.offer__slide',\n            nextArrow: '.offer__slider-next',\n            prevArrow: '.offer__slider-prev',\n            totalCounter: '#total',\n            currentCounter: '#current',\n            wrapper: '.offer__slider-wrapper',\n            field: '.offer__slider-inner'\n        });\n\n});\n"],"names":[],"sourceRoot":""}